<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <!--上面的xsd最好和当前使用的Spring版本号一致,如果换了Spring版本,这个最好也跟着改-->


    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <!-- DispatcherServlet上下文 配置自动扫描的包 ，只管理@Controller类型的bean，
    忽略其他类型的bean，如Service，其他的交给spring去管理 -->
    <context:component-scan base-package="com.gzho.lamps.controller" use-default-filters="false">
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
    </context:component-scan>

    <!--配置开启注解 -->
    <mvc:annotation-driven/>


    <!--********************************************************************************** -->
    <!-- 对访问静态资源请求的处理方式有两种： 选择任意一种配置都可以 -->
    <!-- 方式一：对静态资源文件的访问，避免controller拦截 -->
    <!-- 配置静态资源：default-servlet-handler将在SpringMVC上下文中定义DefaultServletHttpRequestHandler,
    它会对进入DispatcherServlet的请求进行帅选，如果发现是没有经过映射的请求，就将该请求交由WEB应用服务器默认的 Servlet处理。如果不是静态资源的请求，才由DispatcherServlet继续处理。 -->
    <!-- <mvc:default-servlet-handler /> -->
    <!-- 方式二： 配置指定的静态资源地址以及拦截的请求，resources资源文件与WEB-INF同级 cache-period可以使得静态资源进行
    web cache,其中可加属性cache-period cache-period="31536000"为一年 -->
    <mvc:resources mapping="/download/**" location="/res/download/"/>
    <mvc:resources mapping="/upload/**/" location="/res/upload/"/>
    <mvc:resources mapping="/img/**" location="/res/img/"/>
    <mvc:resources mapping="/css/**" location="/res/css/"/>
    <mvc:resources mapping="/html/**" location="/res/html/"/>
    <!--********************************************************************************** -->


    <!-- 配置视图解析器：如何把handler方法返回值解析为实际的物理视图 -->
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
    </bean>


    <!-- 文件上传表单的视图解析器 -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>-->


    <!-- 文件上传 start 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        &lt;!&ndash; 默认编码 &ndash;&gt;
        <property name="defaultEncoding" value="UTF-8"/>
        &lt;!&ndash; 文件大小最大值 上传文件大小限制为50M，50*1024*1024 &ndash;&gt;
        <property name="maxUploadSize" value="52428800"/>
        &lt;!&ndash; 内存中的最大值 &ndash;&gt;
        <property name="maxInMemorySize" value="4096"/>
    </bean>-->
    <!--文件上传 end-->


    <!-- 替代DefaultAnnotationHandlerMapping -->
    <!--<mvc:interceptors>
    &lt;!&ndash; 拦截所有的请求 &ndash;&gt;
    <bean class="com.td.interceptors.AuthInterceptor" />
    </mvc:interceptors>-->


</beans>